//---------------------------------------------------Lambda--------------------------------------------------

Abstract method is public abstract int number(parameter);
there are no braces.
Interface is like a class, but only has abstract methods.
Functional interface is an interface with only one method (which is abstract).
Lambda expression is like these:
    InterfaceName variable = (parameter) -> operations;
    InterfaceName variable = (parameter1, parameter2) -> operations;
    InterfaceName variable = () -> operations;

public Interface GeneralInterface() {
    public abstract int numberSquared(int num);
}

Go to another class and type something like this. (num doesn't have to be named same as abstract method.)
    GeneralInterface numSquared = (num) -> num * num;
    System.out.println(numSquared.numberSquared(5));

String example:
    public abstract String getMessage(String name);

    GeneralInterface message = (name) -> "My name is " + name;
    System.out.println(message.getMessage("Jamal"));

If there's a bunch of stuff in the operations, do this (May require return statement, not sure):
    GeneralInterface numSquared = (num) -> {
    stuff;
    stuff;
    stuff;
    };

Local variables must be defined as final or effectively final before being used in lambda expressions.
    using local variable (parameter in lambda cannot match local variable name, but operations can):
    final int num = 5;
    GeneralInterface numSquared = (n) -> num * num;
    System.out.println(numSquared.numberSquared(num));